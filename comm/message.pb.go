// Code generated by protoc-gen-go. DO NOT EDIT.
// source: message.proto

/*
Package comm is a generated protocol buffer package.

It is generated from these files:
	message.proto

It has these top-level messages:
	PrepareMsg
	PrepareReplyMsg
	AcceptMsg
	AcceptReplyMsg
	UnknownMsg
*/
package comm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MsgType int32

const (
	MsgType_PAXOS_MSG_TYPE_UNKNOWN       MsgType = 0
	MsgType_PAXOS_MSG_TYPE_PREPARE       MsgType = 1
	MsgType_PAXOS_MSG_TYPE_PREPARE_REPLY MsgType = 2
	MsgType_PAXOS_MSG_TYPE_ACCEPT        MsgType = 3
	MsgType_PAXOS_MSG_TYPE_ACCEPT_REPLY  MsgType = 4
)

var MsgType_name = map[int32]string{
	0: "PAXOS_MSG_TYPE_UNKNOWN",
	1: "PAXOS_MSG_TYPE_PREPARE",
	2: "PAXOS_MSG_TYPE_PREPARE_REPLY",
	3: "PAXOS_MSG_TYPE_ACCEPT",
	4: "PAXOS_MSG_TYPE_ACCEPT_REPLY",
}
var MsgType_value = map[string]int32{
	"PAXOS_MSG_TYPE_UNKNOWN":       0,
	"PAXOS_MSG_TYPE_PREPARE":       1,
	"PAXOS_MSG_TYPE_PREPARE_REPLY": 2,
	"PAXOS_MSG_TYPE_ACCEPT":        3,
	"PAXOS_MSG_TYPE_ACCEPT_REPLY":  4,
}

func (x MsgType) String() string {
	return proto.EnumName(MsgType_name, int32(x))
}
func (MsgType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type PrepareMsg struct {
	NodeID     uint32 `protobuf:"varint,1,opt,name=NodeID" json:"NodeID,omitempty"`
	ProposalID uint32 `protobuf:"varint,2,opt,name=ProposalID" json:"ProposalID,omitempty"`
	InstanceID uint64 `protobuf:"varint,3,opt,name=InstanceID" json:"InstanceID,omitempty"`
}

func (m *PrepareMsg) Reset()                    { *m = PrepareMsg{} }
func (m *PrepareMsg) String() string            { return proto.CompactTextString(m) }
func (*PrepareMsg) ProtoMessage()               {}
func (*PrepareMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PrepareMsg) GetNodeID() uint32 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *PrepareMsg) GetProposalID() uint32 {
	if m != nil {
		return m.ProposalID
	}
	return 0
}

func (m *PrepareMsg) GetInstanceID() uint64 {
	if m != nil {
		return m.InstanceID
	}
	return 0
}

type PrepareReplyMsg struct {
	NodeID              uint32 `protobuf:"varint,1,opt,name=NodeID" json:"NodeID,omitempty"`
	ProposalID          uint32 `protobuf:"varint,2,opt,name=ProposalID" json:"ProposalID,omitempty"`
	InstanceID          uint64 `protobuf:"varint,3,opt,name=InstanceID" json:"InstanceID,omitempty"`
	PreAcceptProposalID uint32 `protobuf:"varint,4,opt,name=PreAcceptProposalID" json:"PreAcceptProposalID,omitempty"`
	PreAcceptNodeID     uint32 `protobuf:"varint,5,opt,name=PreAcceptNodeID" json:"PreAcceptNodeID,omitempty"`
	PreAcceptValue      []byte `protobuf:"bytes,6,opt,name=PreAcceptValue,proto3" json:"PreAcceptValue,omitempty"`
	RejectByPromiseID   uint32 `protobuf:"varint,7,opt,name=RejectByPromiseID" json:"RejectByPromiseID,omitempty"`
}

func (m *PrepareReplyMsg) Reset()                    { *m = PrepareReplyMsg{} }
func (m *PrepareReplyMsg) String() string            { return proto.CompactTextString(m) }
func (*PrepareReplyMsg) ProtoMessage()               {}
func (*PrepareReplyMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PrepareReplyMsg) GetNodeID() uint32 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *PrepareReplyMsg) GetProposalID() uint32 {
	if m != nil {
		return m.ProposalID
	}
	return 0
}

func (m *PrepareReplyMsg) GetInstanceID() uint64 {
	if m != nil {
		return m.InstanceID
	}
	return 0
}

func (m *PrepareReplyMsg) GetPreAcceptProposalID() uint32 {
	if m != nil {
		return m.PreAcceptProposalID
	}
	return 0
}

func (m *PrepareReplyMsg) GetPreAcceptNodeID() uint32 {
	if m != nil {
		return m.PreAcceptNodeID
	}
	return 0
}

func (m *PrepareReplyMsg) GetPreAcceptValue() []byte {
	if m != nil {
		return m.PreAcceptValue
	}
	return nil
}

func (m *PrepareReplyMsg) GetRejectByPromiseID() uint32 {
	if m != nil {
		return m.RejectByPromiseID
	}
	return 0
}

type AcceptMsg struct {
	NodeID     uint32 `protobuf:"varint,1,opt,name=NodeID" json:"NodeID,omitempty"`
	ProposalID uint32 `protobuf:"varint,2,opt,name=ProposalID" json:"ProposalID,omitempty"`
	InstanceID uint64 `protobuf:"varint,3,opt,name=InstanceID" json:"InstanceID,omitempty"`
	Value      []byte `protobuf:"bytes,4,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (m *AcceptMsg) Reset()                    { *m = AcceptMsg{} }
func (m *AcceptMsg) String() string            { return proto.CompactTextString(m) }
func (*AcceptMsg) ProtoMessage()               {}
func (*AcceptMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AcceptMsg) GetNodeID() uint32 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *AcceptMsg) GetProposalID() uint32 {
	if m != nil {
		return m.ProposalID
	}
	return 0
}

func (m *AcceptMsg) GetInstanceID() uint64 {
	if m != nil {
		return m.InstanceID
	}
	return 0
}

func (m *AcceptMsg) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type AcceptReplyMsg struct {
	NodeID            uint32 `protobuf:"varint,1,opt,name=NodeID" json:"NodeID,omitempty"`
	ProposalID        uint32 `protobuf:"varint,2,opt,name=ProposalID" json:"ProposalID,omitempty"`
	InstanceID        uint64 `protobuf:"varint,3,opt,name=InstanceID" json:"InstanceID,omitempty"`
	RejectByPromiseID uint32 `protobuf:"varint,4,opt,name=RejectByPromiseID" json:"RejectByPromiseID,omitempty"`
}

func (m *AcceptReplyMsg) Reset()                    { *m = AcceptReplyMsg{} }
func (m *AcceptReplyMsg) String() string            { return proto.CompactTextString(m) }
func (*AcceptReplyMsg) ProtoMessage()               {}
func (*AcceptReplyMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AcceptReplyMsg) GetNodeID() uint32 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *AcceptReplyMsg) GetProposalID() uint32 {
	if m != nil {
		return m.ProposalID
	}
	return 0
}

func (m *AcceptReplyMsg) GetInstanceID() uint64 {
	if m != nil {
		return m.InstanceID
	}
	return 0
}

func (m *AcceptReplyMsg) GetRejectByPromiseID() uint32 {
	if m != nil {
		return m.RejectByPromiseID
	}
	return 0
}

type UnknownMsg struct {
}

func (m *UnknownMsg) Reset()                    { *m = UnknownMsg{} }
func (m *UnknownMsg) String() string            { return proto.CompactTextString(m) }
func (*UnknownMsg) ProtoMessage()               {}
func (*UnknownMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func init() {
	proto.RegisterType((*PrepareMsg)(nil), "comm.PrepareMsg")
	proto.RegisterType((*PrepareReplyMsg)(nil), "comm.PrepareReplyMsg")
	proto.RegisterType((*AcceptMsg)(nil), "comm.AcceptMsg")
	proto.RegisterType((*AcceptReplyMsg)(nil), "comm.AcceptReplyMsg")
	proto.RegisterType((*UnknownMsg)(nil), "comm.UnknownMsg")
	proto.RegisterEnum("comm.MsgType", MsgType_name, MsgType_value)
}

func init() { proto.RegisterFile("message.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 344 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x93, 0x4f, 0x4b, 0xf3, 0x40,
	0x10, 0xc6, 0xdf, 0x6d, 0xd3, 0x96, 0x77, 0x68, 0x6b, 0x5c, 0xb5, 0xd4, 0x3f, 0x68, 0xc8, 0x41,
	0x82, 0x88, 0x08, 0x7e, 0x82, 0xd8, 0x06, 0x29, 0x9a, 0x74, 0xd9, 0xb6, 0x6a, 0x4f, 0x21, 0xa6,
	0x4b, 0x50, 0x9b, 0x6c, 0xc8, 0x46, 0x24, 0x5f, 0xc4, 0x8b, 0x07, 0xbf, 0xaa, 0x64, 0x13, 0xa4,
	0xd4, 0x78, 0xec, 0x71, 0x9e, 0xdf, 0xcc, 0x33, 0x0f, 0xb3, 0x2c, 0x74, 0x42, 0x26, 0x84, 0x17,
	0xb0, 0x8b, 0x38, 0xe1, 0x29, 0xc7, 0x8a, 0xcf, 0xc3, 0x50, 0x5f, 0x00, 0x90, 0x84, 0xc5, 0x5e,
	0xc2, 0x6c, 0x11, 0xe0, 0x1e, 0x34, 0x1d, 0xbe, 0x60, 0xa3, 0x61, 0x1f, 0x69, 0xc8, 0xe8, 0xd0,
	0xb2, 0xc2, 0xc7, 0x79, 0x17, 0x8f, 0xb9, 0xf0, 0x96, 0xa3, 0x61, 0xbf, 0x26, 0xd9, 0x8a, 0x92,
	0xf3, 0x51, 0x24, 0x52, 0x2f, 0xf2, 0xf3, 0xd9, 0xba, 0x86, 0x0c, 0x85, 0xae, 0x28, 0xfa, 0x67,
	0x0d, 0xb6, 0xca, 0x35, 0x94, 0xc5, 0xcb, 0x6c, 0x83, 0xbb, 0xf0, 0x25, 0xec, 0x90, 0x84, 0x99,
	0xbe, 0xcf, 0xe2, 0x74, 0xc5, 0x48, 0x91, 0x46, 0x55, 0x08, 0x1b, 0x32, 0x5c, 0x21, 0x97, 0x91,
	0x1a, 0xb2, 0x7b, 0x5d, 0xc6, 0xa7, 0xd0, 0xfd, 0x91, 0xee, 0xbd, 0xe5, 0x1b, 0xeb, 0x37, 0x35,
	0x64, 0xb4, 0xe9, 0x9a, 0x8a, 0xcf, 0x61, 0x9b, 0xb2, 0x17, 0xe6, 0xa7, 0xd7, 0x19, 0x49, 0x78,
	0xf8, 0x2c, 0x72, 0xcf, 0x96, 0xf4, 0xfc, 0x0d, 0xf4, 0x0c, 0xfe, 0x17, 0xc3, 0x9b, 0x3c, 0xcb,
	0x2e, 0x34, 0x8a, 0xc4, 0x8a, 0x4c, 0x5c, 0x14, 0xfa, 0x07, 0x82, 0x6e, 0xb1, 0x7b, 0xe3, 0xef,
	0x52, 0x79, 0x13, 0xe5, 0xaf, 0x9b, 0xb4, 0x01, 0x66, 0xd1, 0x6b, 0xc4, 0xdf, 0x23, 0x5b, 0x04,
	0x67, 0x5f, 0x08, 0x5a, 0xb6, 0x08, 0xa6, 0x59, 0xcc, 0xf0, 0x01, 0xf4, 0x88, 0xf9, 0x38, 0x9e,
	0xb8, 0xf6, 0xe4, 0xc6, 0x9d, 0xce, 0x89, 0xe5, 0xce, 0x9c, 0x5b, 0x67, 0xfc, 0xe0, 0xa8, 0xff,
	0x2a, 0x18, 0xa1, 0x16, 0x31, 0xa9, 0xa5, 0x22, 0xac, 0xc1, 0x51, 0x35, 0x73, 0xa9, 0x45, 0xee,
	0xe6, 0x6a, 0x0d, 0xef, 0xc3, 0xde, 0x5a, 0x87, 0x39, 0x18, 0x58, 0x64, 0xaa, 0xd6, 0xf1, 0x09,
	0x1c, 0x56, 0xa2, 0x72, 0x56, 0x79, 0x6a, 0xca, 0x4f, 0x75, 0xf5, 0x1d, 0x00, 0x00, 0xff, 0xff,
	0x0b, 0xc9, 0xf1, 0x2a, 0x65, 0x03, 0x00, 0x00,
}
